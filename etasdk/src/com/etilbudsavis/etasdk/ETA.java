/*!
 * eTilbudsavis ApS
 * (c) 2012, eTilbudsavis ApS
 * http://etilbudsavis.dk
 */
/**
 * @fileoverview	Main class.
 * @author			Morten Bo <morten@etilbudsavis.dk>
 * 					Danny Hvam <danny@etilbudsavid.dk>
 * @version			0.3.0
 */
package com.etilbudsavis.etasdk;

import java.io.Serializable;
import java.util.ArrayList;

import android.content.Context;
import android.content.SharedPreferences;

// Main object for interacting with the SDK.
public class ETA implements Serializable {
	
	private static final long serialVersionUID = 1L;
	
	// Domains.
	private static final String MAIN_URL = "https://etilbudsavis.dk";
	private static final String PROVIDER_URL = MAIN_URL + "/connect/";

	// Preferences.
	protected static final String PREFS_NAME = "eta";
	protected static final String PREFS_UUID_NAME = "uuid";
	
	// Authorization 
	private final String mApiKey;
	private final String mApiSecret;
	private final String mUUID;
	
	// Location object
	public Location location = new Location(this);
	
	// Api
	public API api = new API(this);
	
	private String mHtmlCached = "";
	private int mHtmlAcquired = 0;
	private int mHtmlExpire = 15 * 60;
	
	public ArrayList<Pageflip> pageflipList = new ArrayList<Pageflip>();
	
	/**
	 * Constructor for the SDK.
	 *
	 * @param apiKey
	 *			The API key found at http://etilbudsavis.dk/api/
	 * @param apiSecret
	 *			The API secret found at http://etilbudsavis.dk/api/
	 * @Param Context
	 * 			The context of the activity instantiating this class
	 */
	public ETA(String apiKey, String apiSecret, Context context) {
		if (apiKey == null || apiSecret == null) {
			throw new IllegalArgumentException(
					"You must specify your API key and secret when instantiating " +
					"an ETA object. See README for details.");
		} 
		mApiKey = apiKey;
		mApiSecret = apiSecret;
		SharedPreferences prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE);
		mUUID = prefs.getString(PREFS_UUID_NAME, null);
		if (mUUID == null) {
			prefs.edit().putString(PREFS_UUID_NAME, Utilities.createUUID()).commit();
		}

	}
	
	/**
	 * Returns the main url of eTilbudsavis.
	 * @return Main url as String
	 */
	public String getMainUrl() {
		return MAIN_URL;
	}
	/**
	 * Returns a content url of eTilbudsavis.
	 * @return Provider url as String
	 */
	public String getProviderUrl() {
		return PROVIDER_URL;
	}
	
	/**
	 * Returns the SDK name for shared preferences
	 * @return ETA SDK Shared preferences as String
	 */
	public String getPrefsName() {
		return PREFS_NAME;
	}
	
	/**
	 * Returns the api key.
	 * An API key found at http://etilbudsavis.dk/api/
	 * @return Api key as String
	 */
	public String getApiKey() {
		return mApiKey;
	}
	
	/**
	 * Returns the api secret.
	 * An API key found at http://etilbudsavis.dk/api/
	 * @return Api secret as String
	 */
	public String getApiSecret() {
		return mApiSecret;
	}
	
	/**
	 * Returns the unique UUID generated by the SDK.
	 * @return UUID as string
	 */
	public String getUuid() {
		return mUUID;
	}
	
	/**
	 * Gets the cached html for the pageflip. This eliminates
	 * overhead in downloading new content for different pageflips.
	 * @return String of html
	 */
	public String getHtmlCached() {
		return mHtmlCached;
	}

	/**
	 * Update the cached html content.
	 * @param html
	 */
	public void setHtmlCached(String html) {
		if (html.matches(".*\\<[^>]+>.*")) {
			mHtmlCached = html;
			mHtmlAcquired = Utilities.getTime();
		}
	}

	/**
	 * Returns the time at which the html was cached.
	 * @return
	 */
	public int getHtmlAcquired() {
		return mHtmlAcquired;
	}

	/**
	 * The time-to-live for the html cache.
	 * @return
	 */
	public int getHtmlExpire() {
		return mHtmlExpire;
	}

	/**
	 * Set the time-to-live. The default TTL is 15 minutes.
	 * @param seconds
	 */
	public void setHtmlExpire(int seconds) {
		mHtmlExpire = seconds;
	}
	
}